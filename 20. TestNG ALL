TestNG - Testng new generation framework 
Purpose - Design test cases in a systmatic way & it's open source 
It's availbale in jar file as well as in maven dependancy - It's only for JAVA - Junit is for java
Advantages - Its generate beutifull HTML reports 
Annotation - also we can add priporities, sequesnces of test cases to excute, also can add dependacies, grouping 
Data provider feature - If test cases want to exceute multiple time, like 10 users login, like we can use multiple data for login 
TDD- Test driven developements 

Sequence - 

@BeforeSwite - 
We can setup browser property like - WebDriverManager.chromedriver.setup()l

@BeforeTest- 
We can lunch the browser - WebDriver driver new = ChrmeDriver();

@BeforeClass - 
We can enter the login for browser URL - if there is any authentication available  

@BeforeMethod- 
Enter the URL

@Test
Actual test case

@AfterMethod - 
For logout 

@AfterClass - 
For Delete all the cookies 

@AfterTest - 
For close the brorswe 

@AfterSwite - 
To generate the test reports 


Runs for each @Test method - This the pair for each @Test
@BeforeMethod 
@Test
@AfterMethod 


#Select Project - Refresh it - Open index.htm - Properties and copy paste that in browser 


Groups - 

@Test(priority=1,groups= "Site")

or for multple groups - 
@Test(groups= {"Sanity", "Smoke"})

Groups can also difed on the calss level- 



dependsOnMethos is use to make dependancy of any Test on another Test

(dependsOnMethods = "methodname")


If same testCase want to excute 10 times 

@Test(invocationCount=10) - It can use to run same test multiple times 


###Assert- This is used to check the validations of testNG - 

Assert.assertEquals(titile, "Google", "Title is not matched with the expected")





To run the all the different classes on same time we need to use the TestNg.xml file - 
<suite name= "Roofing">
<test name= "Roofing sanity cases">
<classes>
 <class name= "packagename.class1"/>
 <class name= "packagename.class2"/>
 <class name= "packagename.class3"/>
</classes>

</test>
</suite>


if want to use the groups then can use the groups - 
<groups>
<run>
<include name= "Sanity">
</run>

</groups>


Parameters - 

if we want to user the parameters in tesng.xml - 
<parameter name= "url" value= "www.roofing.com"/>
<parameter name= "uname" value= "amol@gmail.com"/>
<parameter name= "pwd" value= "password"/>



Soft assertion 

hard assertion 

TestNg Data provider - how to take the data from the file and like different usname & passwords and use that in the login and password 

Parallel run testNG 

How to exclude particular methonds from the class - 
<methods>
<exclude name= "methodname"/>
</methods>


How to ignore the test case in TestNg - @Test(enabled=false)


##Parameters Syntax - 
@Test 
@Parameters({"name", "url", "password"}) 
Public void method(){

} 


public class TestNGParameters {
	
	@Test (priority=2)
	@Parameters({"name", "browser"})
	public void firstMethod(String name, String browser) {
		
		
		System.out.println("This is the name : " + name);
		System.out.println("This is the browser" +browser);
		
	}


TestNg.XML file - 
Parameter -
<parameter name="name" value= "uname"/>
<paramter name= "email" value= "hokuuserone@gmail.com"/>

eg. 
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd">

<suite name= "Roofing Project">
<test name= "Roofing Sanity">
 <parameter name= "browser" value= "chrome"/>
 <parameter name ="url" value= "https://www.roofingsw.com/"/>
 <parameter name= "name" value= "amolk@hokuapps.com"/>
 <parameter name= "password" value= "1111"/>
 
 <classes>
  <class name= "com.parameters.TestNGSecondClass"/>
  <class name= "com.parameters.TestNGParameters"/>
 </classes>
</test>
</suite>


Now, parameters can be defined at 2 levels

Suite level – The parameters inside the <suite> tag of TestNG XML file will be a suite level parameter.
Test Level -- The parameters inside the <Test> tag of testing XML file will be a Test level parameter.


###DATA DRIVEN USING TESTNG - Excel file - (multiple username and password, kind of multiple data set we want to use in the selenium)

[Data provider in same class]

@Test (dataProvider= "SearchDataProvider")
public void methodName(String column1data, column2data){
system.out.println(column1data,column2data )
system.out.println(column1data,column2data )
}

@DataProvider (name= "SearchDataProvider")
public Object[][] searchProviderMethod(){
return new Object [][] {
   {"column1data", "Column2data"}
   {"Column1data", "Column2data"}
 };
}


###[Data provider method in different class and utility]
@Test (dataProvider= "SearchDataProvider", dataProviderClass= Classname.class)
public void methodName(String column1data, column2data){
system.out.println(column1data,column2data )
system.out.println(column1data,column2data )
}

@DataProvider (name= "SearchDataProvider")
public static Object[][] searchProviderMethod(){
return new Object [][] {
   {"column1data", "Column2data"}
   {"Column1data", "Column2data"}
 };
}

If dataprovider is in another class - then - @Test(dataProvider= “data”, dataProviderClass= classname.class)



###Soft Assertion VS Hard Assertion - 

When hard asseration comes then the test cases failed and other code after the assertaion not get excuated 

For soft asseration also test cases get failed BUT other code after the soft assertaion will get excuted (We need to create new assert class for this)

SoftAssert Softassert = new SoftAssert();

Synatx- Assert.assertEqual(Actual resut, expected results); //hard assert 

Softassert.Assert.assertEqual(Actual result, expected results); //soft assert

Softassert.assertAll();




##Asserts types just for examples - 

1. Assert.assertEuquals(Actual result, expected results) //to compare the string results 
2. Assert.asserTrue()// returns true so if condition under is true then only it pass otherwise get failed 
3. Assert.assertFalse()// retruns false so condition under is false then it get pass 


Screenshot in selenium - 
We can do that using TestNg Listner - 
Apache common IO dependacy need to add in maven dependacies 

Three classes need - 
Base class - (Where we can add a screenshots code)- 


Test Class - Where we can write the actual cases 

Listner Class - 

Reports in selenium - 



#14. Parallel testing using testNG - 
Method level Parallel- 
<suite name = "Parallel Testing Suite">
   <test name = "Parallel Tests" parallel = "classes" thread-count = "2">
      <classes>
         <class name = "ChromeTest" />
         <class name = "FirefoxTest" />
      </classes>
   </test>
</suite>

Class level - 
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd" >
<suite name = "Parallel Testing Suite">
   <test name = "Parallel Tests" parallel = "classes" thread-count = "2">
      <classes>
         <class name = "ChromeTest" />
         <class name = "FirefoxTest" />
		 
    </classes>
   </test>
</suite>


Suit level - 
<suite name = "Parallel Testing Suite" parallel = "tests" thread-count = "2">
   <test name = "Parallel Tests1">
      <classes>
         <class name = "ChromeTest" /> - take one method from here
      </classes>
   </test>
   <test name = "Parallel Tests2">
      <classes>
         <class name = "ChromeTest" /> //take one method from here 
      </classes>
   </test>
</suite>

#Defalt thread-count =“5” for testngNG

when no thread count then default 5 methods or classes or test called


#ITestLister interface 

Create Listener pacakage and create class TestListner - implements ITestLisner - Add TestNg librabary 

Implement there methods such as 
onTestStart
onTestSuccess
onTestFailure 
all above methods returns the result of ItestResult type 

result.getMethod().getMethodname - gives the method that fail or statred or Success 

Then in testNG.XML file we need to add the listner 
<listeners>
<listener class-name= package.classname/>
</listeners>
<test name= "QA">
  <classes>
   <class name= ""/>
   <class name = ""'>
</test>



Suit level parameters apply to the all suit tests

@Test(priority=1)
@Parameters({“name”, “id”})
Public void (String name, int number)


After suite declaration will apply for all the suit 
<parameter name= “name” value= “Sushant”>
<parameter name= “id” value= “2”>
<test name = “QA Test”>
<classes>
<class name = “”/>
<classes>
</test>

Class level parameter for on to the class mentioned under the classes
<test>
<parameter name= “” value= “”>
<classes>
<class name= “”/>
</classes>
</test>

#Optional parameters - If parameters not declare into the XML file then we can use @Options in method 

@Test
@Parameters({“name”})
Public void method(@Optional String name)
SYSO (name) //will display null 


@Test
@Parameters({“name”})
Public void method(@Optional (“Sushant”) String name)
SYSO (name) //will display Sushant 




#Run one method at same time 4 time - threadPullSize= 4, innvocationCount= 4

@Test(threadPullSize= 4, innvocationCount= 4)
Public void methodName()


# Data Provider paraller testing - 
@DataProvider(name= “getData”, parallel= true)


@DataProvider (name= "getData")

public Object [][] readData(Method m){

if(m.getMethodName.equalsIgnoreCase("readData"))
return new Object []{
{"Sushamt", "Pawar", 20},
{"Pravin", "Shinde", 30}

};

else 
{
return new Obhect [][]{

{"Sushamt", "Pawar"},
{"Pravin", "Shinde"}

};

}

}


@Test(dataProvider= "getData")
public voide getMyData(String name, String sirname, int id){
SYSO(name)
SYSO(sirname)
SYSO(id)
}


