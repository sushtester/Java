#1. How many types of browsers available in webdriver
IE, Safari, chrome, FireFox

#2. Can we run the parallel testing without TestNG
Yes I guess using Junit we can do parallel testing as Junit has it's own annotations 

#3. What is serialisation and Deserialization in Rest assured- 
Send body to post method using java object serialisation
.extract()
.responce()

String name= res.asTring()
JsonPath jsPath= new JsonPath(name)
String atculaName= jspath.get(name.username)
atculaName.equalTo("Sushant")

Read more in the Rest API documents


#4. What is spec builders - RequestspectBuilder, ResponceSpecBuilder 
RequestspectBuilder.setBaseURI("");
RequestspectBuilder.setBasePath("");
RequestspectBuilder.queryparam();

ResponceSpecBuilder.expectedStatusCode()


given()
.spec(rspect)

when()
.get()

then()
.spec(resSpec)

#5. What are the packages you have used in Rest assured - RestAssured, Json parser, JSon scema validator, TestNG, hamcrest matchers, Junit, Selenium

#6. Some basic questions of framework and oops implementation in it 


#7. Abstraction & where it is used in your project?


#8. Diff between Abstract class & interface ?


#9. How many times you can write catch block ?- 
Every try block should have a atlease one catch block 

We can add multiple catch block to single try block if more that one type of expection need to handle

becasue there will be more expection such as TimeOut expection, IO expection, File Not found expection, array Out of bound expection

So we can handle those using different catch 

Every try catch block not have a finally - if we want to excuete something after exception comes then need to write finally block
Finally block always excutes even exception comes


#10. Can we declare many interfaces object class inside the interface class (abstract class classname), (interface nameOfinterface)


#11. What is difference between assert and verify. assert comes executions get stop when verify comes(soft assertaion)


#12. SQL where clause, aggregation, group.

#13. Difference between break and continue statement.
Break - break the loop stop the excutions 
Continue - Continue the loop even some condition check



#14. What will you do if after release of software the particular thing working fine but in one day after release it is not working what action will you take on this?
Reproduce the problem.
Analyze the problem
How old is it?
What is the impact?
Prioritize the problem
Fix and deploy 
Analysing the root cause 



#15. Request method In Postman - 
GET, POST, PUT, PATCH, DELETE

#16. How you cover end to end API Testing 

#17. Why Selenium? - Open source, Perform on different browser, multiple time same action performed, flexible with languages


#18. How to customize the complexity in testing - 


#19. How to prioritise testcase -

#20. Code Coverage in Testing - Number of line code those are successufully validate under the testing procedure 

Devloper writes the Test for a key feautes and validate that under the code to make sure those are working 


#21. Difference between list and set- 
Set - unordered , contains different/non duplicate (distinct) elements
Not allowed to add same elements or duplicate
Not having any get method - can’t get a particular element using .get or anything
EG. HashSet


List - ordered, can contain the null as well as same or duplicate elements
Allow you to add same elements
We get element by using .get(indexing)
EG. LinkedList and ArrayList.



#22. Difference between static and non static methods- 


#23. How to write xpath of column 'b' value using column 'a' text - 
using the following-sibling


#23. About Maven - clean build - 
Clean all the complile java code 



#24. write a program for getting sample word which is in this order
Sample
Sampl
Samp
Sam
Sa
S

6) what is the difference between data abstraction and encapsulation where you have implemented in your project.

#7. How To sort elements in list 

Collections.sort(list) //

Collections.sort(list, Collections.reverseOrder());


For array - 

Arrays.sort(arraname)
Arrays.sort( arrayOfItems, Collections.reverseOrder() );  

