public class Main{
   public static valid main (String[], args ){                                            Final data type, ###Java Recursion, 
   System.out.println("Hello My First Java program");
   
   }
}

public class HelloWorld{

     public static void main(String []args){
         int a= 1;
         int b= 2;
         int c = (a+b);
         String usernam= "Pravin";
        System.out.println("The addition is "+ c);
     }
}

Data types in JAVA - 

String - stores text, such as "Hello". String values are surrounded by double quotes
int - stores integers (whole numbers), without decimals, such as 123 or -123
float - stores floating point numbers, with decimals, such as 19.99 or -19.99
char - stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes
boolean - stores values with two states: true or false

Arithmetic Operators
++	Increment	Increases the value of a variable by 1

--	Decrement	Decreases the value of a variable by 1	--x

#Find the lenghth of the string - 
String name= "SUSHANT";
name.length(); 
= 7

toUpperCase() and toLowerCase()
name.toUpperCase().  name.toLowerCase()


The indexOf() method returns the index (the position) of the first occurrence of a specified text in a string (including whitespace):
String name = "Sushant Sudhir Pawar"

name.indexOf("Sudhir");  It will return the position of the Sudhir name like 9 

#String Concatenation - Add two string toghter - The + operator can be used between strings to combine them
String a= "Sushant";
String b = "Pawar";
System.out.println(a+ " " +b);
Or we can use methos concat()
System.out.println(a.concat (b));

If statement 

if (a==b){
}
else{
}

if(a==b){
}
else if (a>b){
}
else{
}


#Java Switch Statements
int day = 4;
switch (day) {
  case 1:
    System.out.println("Monday");
    break;
  case 2:
    System.out.println("Tuesday");
    break;
  case 3:
    System.out.println("Wednesday");
    break;
  case 4:
    System.out.println("Thursday");
    break;
    default:
    System.out.println("No any day for 4");
    break;
}

nested switch - switch under switch -


#While loop - 
        int year=3;
        while (year<8){
            System.out.println(year);
            year++;
            
  While loops is user when e.g when want to print 1 to 10 numbers then
  int i= 1;
  while (i<=10){
  System.out.println(i);
            i++;
  }
  
  Or We can use to calcluate 1 to 10 numbers addition total - 
  
   int num=1;
        int sum=0;
        while (num<=10){
            sum= sum+num;
            num++;
        }
        
     System.out.println(sum);
     
     
     
#For loop - We can use to calcluate 1 to 10 numbers addition total same program that did using the for loop- 

int sum=0;
        for(int i=1; i<=10; i++){
            sum= sum+i;
        }
        
        System.out.println(sum);


We can use for loop for print the array elemnts 

String names[]= {"sush", "pawar", "namskar"};

For(String result: names){
  System.out.println(result);
}


#Break statments - Which can use in for when want to break the loop - 

for (int i = 1; i<=10; i++){
 if (i==5){
  System.out.println ("Found 5 in above");
  break;
 }
}

Continue statement can use in while and for loop - 

 int i=0;
       while (i<=10){
           if (i==4){
               
               System.out.println(i);
               i++;
               continue;
               
           }
           System.out.println(i);
           i++;
           
           
           }


#Array - 

String name []= {"SUSH", "PAWAR", "QA"};
OR
String [] name = {"SUSH", "PAWAR", "QA"};


To find the length of the array - 
name.length;

To display the array elements using the for loop 

for (String result: name){
System.out.println (resluts);
}

Or we can find the length of the array and then use that in for loop - 

 for(int i= name.length-1; i>=0; i--){
          System.out.println (name[i]);
      }
      

for (int i = 0; i < cars.length; i++) {
  System.out.println(cars[i]);
  
  



##JAVA- Methods - 
#1. Method name should always start with small letter and with mix of capital letter eg. myMethod()

static - means that the method belongs to the Main class and not an object of the Main class. You will learn more about objects and how to access methods through objects later in this tutorial.
void - means that this method does not have a return value. You will learn more about return values later in this chapter

Method in main class exmaple - 
public class HelloWorld{
    
    static void addMethod(){
        int a=10;
        int b=20;
        int c= a=b;
        System.out.println(c);
    }
    

     public static void main(String []args){
         
         addMethod();
         
        System.out.println("Hello World");
        
        
        
     }
}

#Return method - 
public class HelloWorld{
    
    static int addMethod(int a, int b){
        
        int c= a+b;
        return c;
    }
    

     public static void main(String []args){
         
         int d= addMethod(20, 30);
         
        System.out.println(d);
        
        
        
     }
}



#Creating object of the class to access the class varibales - 
public class HelloWorld{
    
     String name= "Sushant";

     public static void main(String []args){
         
       HelloWorld obj = new HelloWorld();
         
        System.out.println(obj.name);
        
        
        
     }
}

###Static vs. Non-Static-

Inorder to access the static method we don't need to create an object BUT for non static method we need to create object of the class on which method is wriiten 

For method name first letter is always small and second one is in upper case for eg. nameMethod(){}

public class HelloWorld{
    
    String name= "Sushant";
    
    public void nonStatic(){       //non static method
        String name1= "Pratic";
        System.out.println(name1);
        
    }
    
    public static void staticMethod(){ //static method
        String name2= "Soham";
        System.out.println(name2);
        
    }

     public static void main(String []args){
         HelloWorld obj= new HelloWorld(); //Calling non static method
         obj.nonStatic();
         
         staticMethod(); //Calling static method
         

     }
}


#Note for multiple class the public static vaid main (String[], args){}, always write on public class

#Static method - need static method to call this same for varibale in same class


##Java Constructors - 
The constructor is called when an object of a class is created. It can be used to set initial values for object attributes

Non paratmeter constructor- 

public class Demo
{
     public Demo()
     {
         System.out.println("This is a no argument constructor");
     }
     public static void main(String args[]) {
    	 Demo obj =new Demo();
     }
}

paratmeter constructor- 

public class Demo
{
    int a;
    int b;
    
     public Demo(int c, int d)
     {
         this.a=c;
         this.b=d;
         System.out.println(a);
         System.out.println(b);
     }
     public static void main(String args[]) {
    	 Demo obj =new Demo(10, 12);
    	 
     }
}

Multiple calling of constructer with mentod - 
public class Demo
{
    int a;

    
    public Demo(){
        a=20;

    }
    
     public Demo(int c)
     {
         this.a=c;


     }
     
     
     public int getValue(){

         return a;
     }

     
     public static void main(String args[]) {
    	 Demo obj =new Demo(10);
    	 Demo obj1= new Demo();
    	 System.out.println(obj.getValue());
    	 System.out.println(obj1.getValue());
    	 
     }
}


#Access Modifiers - 

public	- The class is accessible by any other class

default	- The class is only accessible by classes in the same package. This is used when you don't specify a modifier

For attributes, methods and constructors, you can use the one of the following - 

public	- The code is accessible for all classes, even for other packages after create an object of class 

private	- The code is only accessible within the declared class

default	- The code is only accessible in the same package

protected	- The code is accessible in the same package and subclasses


#Non-Access Modifiers - 
For classes, you can use either final or abstract

final	- The class cannot be inherited by other classes

abstract	- The class cannot be used to create objects (To access an abstract class, it must be inherited from another class


For attributes and methods, you can use the one of the following: - 
final	- Attributes and methods cannot be overridden/modified 

static	- Attributes and methods belongs to the class, rather than an object,only use static method 

abstract	- Can only be used in an abstract class, and can only be used on methods. The method does not have a body, for example abstract void run();.

##Java Encapsulation - 

The meaning of Encapsulation, is to make sure that "sensitive" data is hidden from users. To achieve this, you must:

declare class variables/attributes as private
provide public get and set methods to access and update the value of a private variable

 class A{
    private int y= 20;
    
    //getter
    public int getY(){
        return y;
    }
    
    //setter
    public void setY(int z){
        this.y=z;
    }
}


public class HelloWorld{
    


     public static void main(String []args){
         HelloWorld obj= new HelloWorld();
         A obj1= new A();
         obj1.setY(20);
         System.out.println(obj1.getY());

         
         

     }
}


Why Encapsulation?
Better control of class attributes and methods
Class attributes can be made read-only (if you only use the get method), or write-only (if you only use the set method)
Flexible: the programmer can change one part of the code without affecting other parts
Increased security of data



##Java Inheritance (Subclass and Superclass) - 
In Java, it is possible to inherit attributes and methods from one class to another. We group the "inheritance concept" into two categories:

subclass (child) - the class that inherits from another class
superclass (parent) - the class being inherited from


Why And When To Use "Inheritance"?
- It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class.

If you don't want other classes to inherit from a class, use the final keyword


class Fruits{
    String name= "Mango";
}

public class Chav extends Fruits{.         //extends for interite the class fruits, Fruits is a parent class 
    public static void main(String [] args){
      Chav obj= new Chav();                     //created object for child class we can access the varibale, method of parent class
       System.out.println(obj.name);
        
        
    }
}


##Java Polymorphism - 
Polymorphism means "many forms", and it occurs when we have many classes that are related to each other by inheritance.

class Animal {
  public void animalSound() {.  //method
    System.out.println("The animal makes a sound");
  }
}

class Pig extends Animal {
  public void animalSound() {.        //same method
    System.out.println("The pig says: wee wee");
  }
}

class Dog extends Animal {
  public void animalSound() {      ////same method
    System.out.println("The dog says: bow wow");
  }
}

class Main {
  public static void main(String[] args) {
    Animal myAnimal = new Animal();  // Create a Animal object
    Animal myPig = new Pig();  // Create a Pig object
    Animal myDog = new Dog();  // Create a Dog object
    myAnimal.animalSound();
    myPig.animalSound();
    myDog.animalSound();
  }
}







