1. Client/server Error Codes

400 Bad Request- The 400 status code, or Bad Request error, means the HTTP request that was sent to the server has invalid syntax.
401 Unauthorized user - Need credentials to access the site
404 Not Found - Page not found 
500 Internal Server Error
502 Bad Gateway - gatewayor poxy server not getting valid responce from backend server 
504 Gateway Timeout - gatewayor poxy server not getting valid responce from backend server within timeline 

200 - The request was fulfilled.
204. - No Response 

##2. Use of GET, PUT, POST, PATCH, DELETE. [We were using basic auth - username & password given by client, or we were also used API KEY]

GET- Read the data (to get the data) - Data is in JSON/XML formats - Status code 200 - Only URL no body

POST- Create - create a data - data sends in JSON/XML formats - Status code 201 - URL with body in JSON format - and get responce in JSON formats

PUT-

If I had to change my firstname then send PUT request for Update:

{ "first": "Nazmul", "last": "hasan" } So, here in order to update the first name we need to send all the parameters of the data again.(It only updated data)

PATCH:

Patch request says that we would only send the data that we need to modify without modifying or effecting other parts of the data. (It retruns all the other data as well)
Ex: if we need to update only the first name, we pass only the first name.

DELETE- 
just to delete the records 


#JSON Example - 
{"employees":[
  { "firstName":"John", "lastName":"Doe" },
  { "firstName":"Anna", "lastName":"Smith" },
  { "firstName":"Peter", "lastName":"Jones" }
]}

#XML Examples - 
<employees>
  <employee>
    <firstName>John</firstName> <lastName>Doe</lastName>
  </employee>
  <employee>
    <firstName>Anna</firstName> <lastName>Smith</lastName>
  </employee>
  <employee>
    <firstName>Peter</firstName> <lastName>Jones</lastName>
  </employee>
</employees>


#Difference Between Soap and REST API - 

SOAP stands for Simple Object Access Protocol and REST stands for REpresentational State Transfer.

Since SOAP is a protocol, it follows a strict standard to allow communication between the client and the server

SOAP uses only XML for exchanging information in its message format whereas REST is not restricted to XML and its the choice of implementer which Media-Type to use like XML, JSON, Plain-text. Moreover, REST can use SOAP protocol but SOAP cannot use REST.

#SOAP- Simple object access protocol - it has itâ€™s own strict protocol - uses only XML

#REST- Representational state transfer - Uses both http and XML - uses HTTP method - URL - Resource - Path 

#1. Dependacies for RestAssured -  https://gorest.co.in/
a. RestAssured 
b. JSON PARSER/PATH
b. JSON schema validateor
c. hamcrest matchers in rest assured - To perfrom the validation of data 
d. JUnit
e. TestNg
F. Selenium 


#1. GetMethod - 
 Note - Endpoint- what is in the URL is an endpoint

@BeforeMethod 
	public void setUP() {
		
		RestAssured.baseURI= "https://gorest.co.in"; //Base URL 
		RestAssured.basePath= "public/v1";    - Path after the URL
		
	}
  
  @Test.    //check the status code 
public void statusCodeCheck() {
		
		given()                          //uses to give the paramter which is query param or param or path param
		.queryParam("id", "1562")
		
		.when()                          // to give method like post or get 
		.get("/users")
		
		.then()                         //to check the status code 
		.statusCode(208);
				
	}  
  
@Test.    //Print the responce 
public void statusCodeCheck() {
		
    Response res=               //Create Responce variable res and save responce 
    
		given()                          //uses to give the paramter which is query param or param or path param
		.queryParam("id", "1562")
		
		.when()                          // to give method like post or get 
		.get("/users")
		
    SYSO(res.body()/asString or res.body().prityPrint()) // to display the responce 
		
}  


@Test.    //Validate the responce
public void statusCodeCheck() {
		    
		given()                          //uses to give the paramter which is query param or param or path param
		.queryParam("id", "1562")
		
		.when()                          // to give method like post or get 
		.get("/users")
		
   .then()
   .statusCode(200)
   .and()
   .body("rows[0].elements[0].distance.text", equalTo("225 mi")) // verifying the text shows in responce is equealto "225.mi" equal to belongs to harcrest matcher
	 .contentType(ContentType.JSON);
		
} 



#2. Post Method - Body is a Payload - As we sends the Body here we can create separate class for body attributes that we send in request 

 # Class for bodyDetails - Which is a itiliasiztion of body attibutes valriables like string, int or Map if there are Key value parameters 
 
 public class BodyDetails {

	private String name;
	private String gender;
	private String email;
	private String status;

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getGender() {
		return gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

}


#Test case class - 

public void checkPostMenthod() {
		
		BodyDetails input= new BodyDetails(); //create object of class where we store the attributes and below we can set our data there using setName methods of that class
		input.setName("QLAName");
		input.setGender("male");
		input.setEmail("qaagendernew@check.com");
		input.setStatus("active");
		
		Response res= 
		
		given()
		.queryParam("access-token", "1ad35f2b7261de0437c93219396b25082cfd4d575d45178ed6d3935601ede590")
		
		
		.body(input)                             //. So here we just need to add the object of the class wehere we stored the attributes 
		.contentType(ContentType.JSON)
		.when()
		
		.post("/users");
    
		System.out.println(res.body().prettyPrint());
				
	}
  
  
#OAuth 1 - Where need to user cunsumer key, cunsumer secret, Access token, access token secret , we need to use the scribe maven depency here

String consumerKey = "ubhe5nnmztzlJMzdLihtKEgsT";
	String consumerSecret = "KjDJDSJw2o882K71cK33PqUdRbIlp5DNxCxYknDrSvQwNsb2S1";
	String accessToken = "886092793365409792-mBtgcXzcn9IOC1WmWp5c1fXMn3HDZHr";
	String accessSecret = "jUIEOAnEiZLlICLBlpR6UhVKZ98CMpQ7banbfcP5gW3eS";
	
	@BeforeClass
	public void setup() {
		RestAssured.baseURI = "https://api.twitter.com";
		RestAssured.basePath = "/1.1/statuses";
	}
	
	@Test
	public void statusCodeVerification() {
		given()
			.auth()                                                             //after givern add .auth(). for basic auth need to put .basicauth(username, password)
			.oauth(consumerKey, consumerSecret, accessToken, accessSecret).     //after .auth we need to put .oauth and set of keys 
			.queryParam("status", "My First Tweet")
		
    .when()
			.post("/update.json")
		
    .then()
			.statusCode(200);
	}
  
  
  
  #3. How to extract the JSON responce - extract().response() we can store the any attribure in responce as string or in intergater
  
  extract().response() which gives responce which we can covert to string using asString(), then that string is need to pass 
  using JsonPath jsPath = new JsonPath(responseString)
  String name = jsPath.get("user.name"); // get the value of user.name attribute 
  
  
  @Test
	public void extractResponse() {
		Response response =
			given()
				.auth()
				.oauth(consumerKey, consumerSecret, accessToken, accessSecret)
				.queryParam("status", "My First Tweet")
			.when()
				.post("/update.json")
			.then()
				.statusCode(200)
				.extract()
				.response();
		
		
		String responseString = response.asString();
		System.out.println(responseString);

		JsonPath jsPath = new JsonPath(responseString);
		String name = jsPath.get("user.name");               //We can use this as a quesry param in another test case then if it's needed 
		System.out.println("The username is: " + name);
	}



#4. In Order to show the Logs for request and responce we send - 
@Test
	public void testMethod() {
		given()
			.auth()
			.oauth(consumerKey, consumerSecret, accessToken, accessSecret)
			.queryParam("status", "My First Tweet 11")
		.when()
			.post("/update.json")
		.then()                              // Responce logs .all() for all responce shows all the responce in console
			.log()
			//.headers()
			//.body()
			//.all()
			.ifError()                          //It only shows logs when error comes in the responce 
			.statusCode(200);
	}
  
  
#5. To validate the attribute - hamcrest matches maven we can use

@Test
	public void readTweets() {
		given()
			.auth()
			.oauth(consumerKey, consumerSecret, accessToken, accessSecret)
			.queryParam("user_id", "apiautomation")
      
		.when()
			.get("/user_timeline.json")
      
		.then()
			.statusCode(200)
			.body("user.name", hasItem("RestAPI Automation"))           // .body(user.name[1].text. hasItem ("SUSHANT"))
			.body("entities.hashtags[0].text", hasItem("multiple1"))
			.body("entities.hashtags[0].size()", equalTo(3))
			.body("entities.hashtags[1].size()", lessThan(2))
      .body("text", hasItem("multiple"))
			.body("size()", equalTo(2));                               // for the size of the heads
	}
  
  
  
#6. Use the request specification - As we use the same given (). auth(),.ouath() .queryparam(). which is a contact for test case class so
We can initialise that at the top using RequestSpecBuilder 

RequestSpecBuilder requestBuilder;
static RequestSpecification requestSpec;

		requestBuilder = new RequestSpecBuilder();
		requestBuilder.setBaseUri("https://api.twitter.com");
		requestBuilder.setBasePath("/1.1/statuses");
		requestBuilder.addQueryParam("user_id", "apiautomation");
		requestBuilder.setAuth(authScheme);
		requestSpec = requestBuilder.build();



.given()
.spec (requestSpec)


#7. Use of the Response specification - As we know we nee =d to check the same things multiple time such as statusCode
or same attribute in every response test case such as name 

		responseBuilder = new ResponseSpecBuilder();
		responseBuilder.expectStatusCode(200);
		responseBuilder.expectBody("user.name", hasItem("RestAPI Automation"));
		responseSpec = responseBuilder.build();
    
.then()
.spec(responseSpec)



What are the headers in API, and what are the common headers used - 
#Content Type, Accept header (Which type of response you need either Json or XML), cookie
  
  

