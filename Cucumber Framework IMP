Cucumber Framework

Packages in the cucumber framework - > rest assured, json, Gson, io.cucumber (cucumber-java), (cucumber-testng), testNg, java version 7, 
log4j (display the logs we used Logger method of log4j) - Logger.info, logger.error, cucumber version 7.14

We are using cucumber using rest Assured for our API automation (Using Rest Assured libraries)
in a cucumber framework we are writting the test cases in the feature file using gherkins language commonds such as given, when, then,and 
& written the back end code/glue code for the same 

so mainly we have 
#Feature package - Where we have written different features files for different application componenet using Gherkin langauge
#Step defination package - Where we have written different step defination java class to map the features, which we called as glue code/ backend code 
#runner package - which contain the different runner java class with cucumber options which is also as per the componenet 
#suite package - where written testNG xml files as per the component contains the runner class in order to execute a automation for respective componenet 
#Common utility package - 
API BASE class - conations some common method such as verifyResponsecode, createToken(client id, client secrets, audience, grant type) & which is extended by 
all the step defination class also it contains the request specification method as per the authetication method such as API key, Oauth toekn, basic auth, 
as a parameter to to thet method which return the request 
Constant class - Java class which contains static methods to read the properties file contstants such as baseURL, base path, cleint id, client secret, apikey 
so we have created properties files as per the environment dev, stage, prod which contaions all the constants 
#Dto package - which contains the request dto POJO classes as per the different componenet 


In the feature file we are sending the test data in the form of data table (using pipilelin) using scenario outline 
e.g 
Scenario Outline: Check the user login functionality
Given user is on login page 
When user eneter below login details 
|usrname|password|
|<username>|<password>|
Then user should able to login successfully 

Expmaple:
|username|password|
|usenrname1|password1|
|usenrname2|password2|
|usenrname3|password3|

we have added the tags directly to those examples test data as we are adding multiple example to one scenario outlineso regression tag where we need to test the API using all the example 
then that example which conation that regression data will have a tag @regression 

for example - If we are checking add user API- 

add user using first name capital 
add user using last name capital
add user using upper case first name

so this will be your regression scenarions so we can add those in one example data table with the tag of @regression 

& another example table will be for smoke where we only check 
add user using valid details 

so for this example data will add tag as Smoke 

and for feature we add tag as feature name where all the feature will add 



#How we take the data from feature file - 
as we are sending the test data from feature file using data table using scenario outline, in the step definatin class 
we are getting those data in Datatable class of cucumber DataTable table 
as we are sending the data in the form of key value pair we taken that using datatable.asMaps method 
List<map<String, String>> list = table.asMaps(String.class, String.class)
then we add those data into request dto pojo class where we have written variables using getter setter 
so we are simply adding the input data to that pojo class using set method which retruns the pojo class object 

#How we contruct the request - 
We created contsraucter of the same step defination class where we are declaring the baseURI and basePath using RestAussred method
RestAssured.baseURI
RestAssured.basePath
which we are getting from the properties file 

Then we are calling cuntsrauctrequest method which written into base class and passing the paramter as per the request such as 
authetication, token which return the request of restassured 

then appending method post/get, paramter if any to the request and storing the response in Response class object of RestAssured 


#How you are hitting post method using dto serialisation - 
in the post method we sends the request dto pojo class object into request body before that we usaualy convert the dto into Json file 
using Gsonbuilder 
String payload = new Gsonbuilder().create().toJson(dtoclassobject)
then we pass the payload to body


#How you are validating the response deserialsation - 
a. Using RestAssured response.jsonPath().getString() or getList() method where we need to pass the path till the element as we are stroing the response into
RestAssured Response class object response & then assert that value with request dto variable 

b. Using JSON libraries as well we can find the element 
JsonObject jsobj= new JsonObject (res.asString()); res.asString() is a method of RestAssured 
JsonArray jsarry= jsobj.getJasonArray("data");

for(int i=0; i<jsarry.length; j++)
 JsonObject jsobj2 = jsarry.getJsonObject(i)
 jsobj2.getString();


#How to add parameters - 
.queryParam("paramname", value)  ?paramname=value
.pathParam("paramname", value) /value
.Param(""paramname, value) /paramname=value

also if we want to set a multiple param then we can use map 
Map <String, String> map = new HashMap<String, String>;
map.put("username", "sushant");
map.put("password", "pawar");
.param(map)


#How construct token method in API base class - 
In the step defination class we are creating a counntructer of the same class and declaring the baseURI and basePath using
RestAssured.baseURI- 
RestAssured.basePath - 
 
then in the step method we are calling contsraucrrequest method with param such as auth type, token, accep type
RestAssured.given().header("accept", "").header("Authorization", token) or auth().Oauth(token)
so it returns the RequestSpcification request object and then we are apeending other details such as .param.contentType 
then in step request.param().when().post(payload).then().extract().response();



#How you execute the on locally - 
using cmd - mvn clean install -Penvname -DSureFire.suiteXmlFile= "" --tags@

#How you execute using ADO - 


Runner TestNg Runner - 
CucumberOption - plugig= (json report for cucumber, html report), glue=(step defination package path), feature =(feature file pckg path) tags(), dryRun, monochrome = true, 
strict= true (strict is true then while execution if one of the step is missing then it will add that as a build failure)

json report cucumber - We are using masterthought plugin  

@CucumberOptions(monochrome = true, strict = true,
    plugin = { "pretty", "html:target/report", "json:target/apitxnmgr-cucumber-report.json" }, dryRun = false,
    glue = { "com.nuance.aim.api.automation.tests.stepdefs.servicemanager",
        "com.nuance.aim.api.automation.tests.stepdefs.transactionmanager",
        "com.nuance.aim.api.automation.tests.stepdefs.dispatcher" },
    tags = { "@regression , @smoke" },
    features = { "src/main/automation/features/aimapi/transaction/transactionapi.feature",
        "src/main/automation/features/aimapi/transaction/resultapi.feature",

TestNgRunner class extends with AbtsractTestNgCucumberTest class 

We have created multiple runner class as per the componenet and adding resptive features path into feature option 
also created multiple xml file which calling the runner class of componenent 

###JSON Paseser Deserialsation - 
{
 data:[{}
 ]
 [{}]
 [{}]
 name:"suahant"

}

JsonObject jsobj= new JsonObject(res.asString());
JsonArray jsArry = jsobj.getJsonArray("data");
for(int i=0; i<jsArry.length; i++)
 JsonObject jsobj2= jsArry.getJsonObject(i)
 
 
res.JsonPath().getString("data[0].name");

#1. Array contains mupltiple objects as a records 
[ {name: rahul, id=1}
  {name: ketan, id=2}
  {name: sushant, id=3}
  {name: kishor, id=4}
] 

List<String> str= res.jsonPath().getList("name");
str.get(0); 

#2. { items: [{name: sushant, id:1} ]
  [{name: ketan, id:2}]
  [{name: kishor, id:3}]
  [{name: rahul, id:4}]
}
String str= res.jsonPath().getSrting(item[0].name);

#3. { data: [{name: ketan, id:2}, 
{name: ketan, id:2}, 
{name: ketan, id:2}]
}
List<String> str = res.jsonPath().getList(data[0].name);
str.get(0);

# size of the array 
int size= res.jsonPath().getInt("data.size()");


res.jsonPath().getList(address.street); //if multiple objects of address



Last read items - 


For feature file In the srs/main/resources we have created one package for feature 
then under the feature package we have multiple folder as per the componenet in our application 
and we  written the feature file under those compoenent folder so each component folder contains multiple feature files which covers all the scenarios
for that componenet 
EG. fetuare pckage/ user component - all the featuere files such as add user, delete user, update user which covers the testing of user coponenet 

In the test/java - We have created one step difination package, and created multiple folders under that as per the componenet, 
which contains the back end code/glue code as per the features 

also we have created one dto packages under that created different folder as per the component which contains both the request dto and response dto 
in order to save the test data for request and response

also we have one common package which contains the base class (Which is extendes by all our steps defination class which contains the request specification methods) 

runner package which contain the different runner java class as per the component -  TestNG Runner which contains the cucumber options such as plugins, feature file path glue code path, tags 


The feature file contaions multiple postive & negative scenarios in the format of Scenario Outline with multiple set of test data using Example 

Feature - Create feature file using gherkin commands which is in plane english, different feature file created for each component 
 Feature file contain feature name 
 Feature: Test 

#under common hooks - scenario class of cucumber which take the scenario name 
@before (order=0)
syso("starting the scenarion execution " scenario.getname())
@after (order=0)
syso("End the scenarion execution for" scenario.getname())
