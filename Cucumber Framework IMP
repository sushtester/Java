Cucumber Framework

 











we declared the RestAssured.baseuri & RestAssured.basePath at the step class contructer so it will be common for the rest of the enpoints in the class 

        RestAssured.baseURI = getProperty(Constants.AIM_API_BASEURL);
        RestAssured.basePath = getProperty(Constants.SERVICE_EP);
		
then we construct the request using request specification method which is written in the base class & which returns the RequestSpecification class object request
we have written couple of methods under base class for the requestspecification as per the authetication such as basic auth, Oauth, apikey 
we are simply calling those methods using respective parameters and it will return the request with those header details and authentication

after that we write the method .post(body) or get() and extact the respose using .extract().respose() then response in  List<Response> to take 
the response for the each scenario

then we add those responses in scenario context class using hashMap <key value> key is enpoint name and value is response, so we can use those for validation later

then in another steps where we are taking all exected test data as a requestdto and then check those data in the response one by one using 

we extract those response usig response.jsonPath().getString("object path") 
					String firstName = response.jsonPath().getString("[0].firstName");
					Assert.assertEquals(firstName, dto.getUserFirstName(), "Incorrect FirstName");
if the attirbute in json under the two json object 
personal{
  name{
      id=10;   
  }
}					

response.jsonPath().getString("personal.name.id")



#How we construct the request -  
 //Create method for custruct the request which return the requestSpecification in the form of request of Rest Assured and passing dto there 
 request = RestAssured.given();
 then adding header such as Accepet, contentType 
 request.header("Accept", dto.getAccept().trim());
 request.header("Content-Type", "application/json");
 request.header("Accept", "application/vnd.nuance.powershare.study.job.v1+json");



List<Responses>response= new ArrayList<>(); 
then hit the request coming from request specification 
Response response= request.when().log().all().get(endpoint);;
response.add(response);

for(int i = 0; i < responses.size(); i++)
 responses.get(i).statusCode()  //first response
 Assert- dto.getStatusCode.responses.get(i).statusCode()
  //we get the element from Json either using
  JSONObject jobj= new JSONObject (res.getBody().asString())
  JSONArray jArry= jobj.getJSONArray("data");
  for(i=0; i<jArry.length; i++)
   JSONObject name = jArry.getJSONObject(i)
   String firstName = name.getString(); 
                 OR
	response.jsonpath().getString(.data[0].firstname)		         

For validate step - take the data from the feature file and add that in Response DTO in same way 

#Paramters - 
if the request needs a query parameter then we add that using request.queryparam(attribute, value) ? 
pathParam - request.queryparam(attribute, value) /
param - request.param (attribute, value) =


#Execution - 


Runner TestNg Runner - 
CucumberOption - plugig (json report, cucumber report, html report), glue(step defination package path), feature (feature file pckg path) tags(), dryRun, 


#How to add Query parameter - 
 request.queryParam("cars")
 
#How to add Post method with Body  - 
 -When simple body is there with some object - 
 JSONObject updateJobStatusRequest = new JSONObject();
 updateJobStatusRequest.put("jobStatus", "Ready");
 request.body(updateJobStatusRequest.toString());
 
- When want to send the Json file then we can use the String which can generate by converting the Json file into String 
  payLoad = JsonUtility.jsonFileReader(fileName);  // We are converting the Joson File into the string to accpet in the body 
  request.body(payLoad);
  Response response = request.when().log().all().post(endpoint);
 
 JSON Parser example - 
{data[{}, {}, {}], count[{}, {}, {}]}
JSONObject jobj= new JSONObject (res.getBody().asString())
JSONArray jArry= jobj.getJSONArray("data");
for(i=0; i<jArry.length; i++)
 JSONObject name = jArry.getJSONObject(i)
 String firstName = name.getString();
 
response.jsonpath().getString(".data[0].firstname") 
