X path - Absulate & relative - Check advanteges and disadvateges of those

Absulate - Starts from the root elements of HTML code - Body div 

Relative - Find the excact path of that particular element 

So releative is always better for finding the Xpath 

PDF for the locator - https://github.com/LearnByBhanuPratap/seleniumScriptsLatest/blob/master/data/Locators%2C%20X%20Path%20and%20CSS%20Notes.pdf

Xpath - //Tag name[@attributeName= ''], eg. //input[@id= 'email']

Xpath - //TagName [@classname= '' and @attributeName= '']. eg //input[@class= 'inputtext _55r1 _6luy' and @id= 'email']



For text when there is no any id, name, or any attribute and attributes get changed that time we need to user below 

//div[contains(text(), 'Click your picture or add an account')]

//div[contains(text (), 'Crate account label')]

//div[text()='Click your picture or add an account.']

//nav[@id= 'navbar']/a[1] - https://www.screencast.com/t/Iv0oqkC6Q



//div[@class= 'right']/p[contains (text(), 'Latest stable version ')]/a - It will use for SSID - https://www.screencast.com/t/4ZuLzGECXMc



When go directly to class name & then use//
//div[@class= 'top-nav-items col-md-6 pull-right no-padding']/div[3]/a for Login link on staging 


/parent::*
/child::option[1]
/following-sibling::option[2]
/preceding-sibling::option[2]


Child - //option[contains(text(), 'Select')]/parent::*/child::option[contains(text(), 'MRS')]

Parents - //option[contains(text(), 'Select')]/parent::*/child::option[contains(text(), 'MRS')]

Following siblings - //select[@id= 'CONTROLGROUPREGISTERVIEW_PersonInputRegisterView_DropDownListTitle']/child::*/following-sibling::option[3]

Preceding siblings - //select[@id= 'CONTROLGROUPREGISTERVIEW_PersonInputRegisterView_DropDownListTitle']/child::*/following-sibling::option[3]/preceding-sibling::option[2]



CSS and Xpath - 

1. CSS by ID = tagname#ID_value. Or a[id=email]

input#email

2. By name - tagname[name= email]

input[name=email]

With multiple attributes 

a[id=ship-today][data-segment-type=button]

For text - 
a[text= ‘Demo check’]. //for text in the HTML



Xpath- 
1. By id - 

//a[@id= 'ship-today']

//input[@name= ‘email’]


With multiple attribute - 
//a[@id= 'ship-today' and @data-segment-type= 'button'] 
OR
//a[@id= 'ship-today’] [@data-segment-type= 'button']


For text - 
//a[Contains(text(), ‘Demo check’)]




3. CSS advantages over Xpath- 
It’s faster than Xpath 
It has high chance to find the elements than the Xpath
It’s compatible to the most of the browser


#Dynamic Web Locator - 

For grid - we have td and tr 
td- row
tr- column 

<tr>
  <td>
  <td>
 <tr/>
 
user for loop for both row and column 


 
Using -
@id -        //input[@id= '']
@class -    //div[@class= '']

contains - 

//input[contains(text(), '')]

//div[@class= 'xtXmba' and contains(text(), 'Electronics')] if multiple elements are present for the class 

//div[@class= 'eFQ30H']/a/div[contains(text(), 'Grocery')]

Parent - 
/parent::*

Child 
/child::*
/child::li[3]
//ul[@class= 'nav navbar-nav col-md-12']/child::li[4]

following-sibling -
//ul[@class= 'nav navbar-nav col-md-12']/child::li/following-sibling::li

preceding-sibling - 
//ul[@class= 'nav navbar-nav col-md-12']/child::li[5]/preceding-sibling::li[2]



CSS selector - faster than xpath, maximu chanses to find the element, most time compataible with other browser as well 
disadvatages - We can't travel backward using CSS selector only forward we can travel
.classname - if class name with space then add .

ID - we use the # - HTML tagname and #ID
   Eg. input#1240
input#identifierId
div#identifierNext

Combine ID and class (some elemnets having ID and class name that time we can use below)
   .classname#ID
   #ID.classname 
.FliLIb.FmFZVc#identifierNext

For the Dynamic elements where some elements can change at the start of end 
   textmatch of any attribute - input[name*= 'sushant']
   
   starts with - ^ - input[name^= 'sush']
   
   end with - $ - input[name$= 'ant']
