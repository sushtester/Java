#1. Prime number - (if number%i==0) - 




#2. Factorial - num=14;
fact= 1

Factorial program in JAVA- 
int fact= 1;
int number=4;

for(int i=1; i<=number; i++){
 fact= fact*i
}
System.out.println(fact);



#3. String Reverse - Char and the whole string statements - 

public void stringRevers() {
		String name= "Sushant Pawar";
		
		
		StringBuilder newString= new StringBuilder();
		
		newString.append(name);
		
		newString.reverse();
		
		System.out.println(newString);
}

 #Using toCharArray() - Which crate array of the char 
 
 char[] name= string.toCharArray(); //created name array of char 
 
 public void StringCharReverse() {
		String name= "Sushant";
		String finalResult= "";
		
		char[] reverThisString= name.toCharArray();
		System.out.println(reverThisString.length);
		
		for(int i=reverThisString.length-1; i>=0; i--) {
			
		
			
			finalResult=finalResult+reverThisString[i];  
			
		}
		
		System.out.println(finalResult);
	}
 
 
#4. Add two number - 
int num=2;
int tonum=3;
int sum= num+toNum;
SYSO(sum);


#5. Print dublicate numbers showing in array 
public void displaySameNUmbers() {
		int [] number={10, 20, 10, 30, 40, 10, 50, 20, 60};
		
		for(int i=0; i<=number.length-1; i++) {
			for(int j=i+1;j<=number.length-1; j++) {
				if(number[i]==number[j]) {
					System.out.println(number[j]);
				}
				
			}
			
		}
    
  
#6.   String name= "Sushant Pawar";
	    String newName= name.substring(0, 7);
	    System.out.println(newName);// Sushant
	    
	    String name= "SushantPawar@name";
	    String [] namqa= name.split("@");
	    for(String finalName: namqa){
	        System.out.println(finalName);
	    }

char[] ch={'j','a','v','a','t','p','o','i','n','t'};  //covert the char array to string 
String s=new String(ch); 
SYSO (s)// javapoints;



#7. What are the different types of string methods - 
compare(), concat(), equals(), split(), length(), replace(), compareTo(), intern(), substring() 
	    String name= "Sushant Pawar";
	    String newName= name.substring(0, 7);    //(first value, secondvalue) - first started count as 0, 1, 2... for second value statred count from 1, 2, 3... to string
	    System.out.println(newName);// Sushant
	    
	    String name= "SushantPawar@name";
	    String [] namqa= name.split("@");
	    for(String finalName: namqa){
	        System.out.println(finalName);
		

#8. If conditions such as Equals , Equaluslignorecase, not equalto 


#9. Reverse the stings - 

public class HelloWorld{

     public static void main(String []args){
         
         String name= "My Name is Sushant";
         
         StringBuilder input1 = new StringBuilder();
         
         input1.append(name);
         input1.reverse();
         System.out.println(input1);
     }
}

#Reverse the char - 
public static void main(String []args){
         
         String input = "SUSHANT";
 
        // convert String to character array
        // by using toCharArray
        char[] try1 = input.toCharArray();
 
        for (int i = try1.length - 1; i >= 0; i--)
            System.out.print(try1[i]);

         
     }
     
#String Append - 
+ operator 

String name + Staring sirname

OR using concat 
String fullname = name.concat(sirname)


#8. Find dulicate value and count of the string using the HashMap- 

String name= "sushants"
char[] nameQA= name.tocharArray();
Map<Character, Integer> bmap= new HashMap<Character, Integer> ();

for(char names:nameQA ){
  if(bmap.containsKey(names)){
     bmap.put(names, bmap.get(names)+1)
  }
  else{
   bmap.put(names,1)
  }
}


for(char nameQAre: bmap.keySet()){
if(bmap.get(nameQAre)>1){
SYSO "The char nameQAre is shwoing bmap.get(nameQAre) times"
}

#10. String lowercase and upper case 
String name= Sushant;
string nameLower= name.toLowerCase();
String nameUpper = name.toUpperCase();

toUpperCase()
toLowerCase()

}

#11. Difference between the String class and String variable 

When declare te string as String = "name"; //it stores into the string contant poll // Memory less
When declare string as String name = new String (String) // It store the object in heap memory and 
String in constant pool 

So when 
String S1= "name";
String S2 = "name"

This time in string constant pool it obly store one "name" so both S1 and S2 has only one memory in constant string pool 

BUT when 
String S1= new String ("name")
String S2= new String ("name")

This time create two objects S1 and S2 in heap memory and two "name" in constant string pool, this causing garbage collection ih heap memory

#12. Difference in = and == 
- = is for assign the value 
String name= "sushant";
String nameQA= name;

Difference between == and .equals ()

So in == we check the object shares the same memory location 
and in .equals() we check the values of the object 

String S1= "name";
String S2= "name"

here both the objects shares the same memory location in string constant pull 
so S1==S2

BUT for String S3= new String ("name") 
here one object is created in heap which refere the memory in string constant 

so memory location of S1 and S3 not the same
so S1==S3 will fail


#13. compareTo() - returns zero when string are same 
Or retuns positive or negative number as per compare the string with character
if first char is of left string is greater than the second then returns positve else negative









