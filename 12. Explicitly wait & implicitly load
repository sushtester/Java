#Hard Waits - 
Thread.sleep(1000); 1000 milisecod means 1 second

#Implicitly wait - Tell driver to wait until the mentioned wait to through the error No such element present if present then go ahead quickly for next action element 
Implicit Wait time is applied to all the elements in the script, so once decalre that it will apply to all the elements in the script
Default implicit wait is 0 
driver.manage().timeouts().implicitlyWait(10, TimeUnits.SECONDS);
We manily used that after initialising the webdriver  


#Explicitly wait  - To add a wait to the specific element by adding a condition, such as 
elelement to be clickable 
element to be visible 
element to be selecteble 
it can be applied only for specified elements.

For the Ajax element sometime it takes time to load the expected element and that time we need to wait certain amount of time to appear that element 

WebDriverWait wait= new WebDriverWait(driver, 10);
wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//body/div[1]/div[3]/form[1]/div[1]/div[1]/div[3]/center[1]/input[1]")));
wait.until(ExpectedConditions.elementToBeClickable(By.Xapth("")));
wait.until(ExpectedConditions.alertIsPresent())


# Fluent Wait - It also tells web driver to wait for a maximum time before throwing execpetion just need to provide frequency to check the element visibility time interval
Lets consider we provide max timeout of 30 seconds, then if we provide frequency time or we can say pollingevery time as 5 seconds
then after 5 seconds interval it will check the visibility of the element till max time 30 seconds 

FluentWait <WebDriver> wait= new FluentWait<WebDriver>(driver)
.withTimeout(30, TimeUnits.SECONDS)
.pollingEvery(5, TimeUnits.SECONDS)
.ignoring(NoSuchElementExpection.class);

WebElement linkBtn= wait.until(new Function<WebDriver, WebElement>(){
  Public WebElement Apply(WebDriver driver){
     Return 
     Driver.findEleent(By.xpath(“//”)); 
      }       
});

Or 
we can use the expectedConditions as well 

wait.until(ExpectedConditions.visibilityOfElementLocatedBy(Xpath));

# pageLoadTimeout()
driver.manage().timeout().pageLoadTimeout(30, TimeUnit.SECONDS)
the default pageload timeout is set to 0 (infinite time out)
so basically we use the pageLoadTimeOut to esnure that page is loading with the a specific time, if not then throw the error 
we use this while doing the performace testing where we need to make sure pages will not take more than expected time to load 

