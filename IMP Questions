1. Factorial program in JAVA- 
int fact= 1;
int number=4;

for(int i=1; i<=number; i++){
 fact= fact*i
}
System.out.println(fact);
 



2. String Reverse - Char and the whole string statements - 

public void stringRevers() {
		String name= "Sushant Pawar";
		
		
		StringBuilder newString= new StringBuilder();
		
		newString.append(name);
		
		newString.reverse();
		
		System.out.println(newString);
}

 #Using toCharArray() - Which crate array of the char 
 
 char[] name= string.toCharArray(); //created name array of char 
 
 public void StringCharReverse() {
		String name= "Sushant";
		String finalResult= "";
		
		char[] reverThisString= name.toCharArray();
		System.out.println(reverThisString.length);
		
		for(int i=reverThisString.length-1; i>=0; i--) {
			
		
			
			finalResult=finalResult+reverThisString[i];  
			
		}
		
		System.out.println(finalResult);
	}
 
 
#3. Add two number - 
int num=2;
int tonum=3;
int sum= num+toNum;
SYSO(sum);


#4. Print dublicate numbers showing in array 
public void displaySameNUmbers() {
		int [] number={10, 20, 10, 30, 40, 10, 50, 20, 60};
		
		for(int i=0; i<=number.length-1; i++) {
			for(int j=i+1;j<=number.length-1; j++) {
				if(number[i]==number[j]) {
					System.out.println(number[j]);
				}
				
			}
			
		}
    
    
    
#5. Types of exception in the automation you faced- 
Checked & unchecked expection - 

A. Checked expection - When file not found we use this when reading file - eg- 
We use this while loading the properties file - config.properties 

public void readPropertyTest() throws IOException {
 Properties pro= new Properties();
 FileInputStream io= new FileInputStream("/Users/sushant/eclipse-workspace/SeleniumQA/src/test/java/demo/config.properties"); //FileNotFoundException
 pro.load(io); //IO Exceptions - Input Output operation failed exceptions 
 
}

if(age<18) {  
            //throw Arithmetic exception if not eligible to vote  
            throw new ArithmeticException("Person is not eligible to vote");   

B. unchecked expection - 
Array out of bound OR ElementNotVisibleException, EG- 

driver.findElement(By.id("submit")).click();
Exception Handling:
 
try {
driver.findElement(By.id("submit")).click();
} catch (NoSuchElementException e)

Selenium exception - 
NoSuchElement exception 
ElementNotFound - When element is not found under DOM (Document object module)
ElementNotVisible - an element is present on the DOM (Document object module), it is not visible, and so is not able to be interacted with
ElementNotClickable 
ElementNotSelectableException
TimeoutException - when using the WebDriver. get method to load a page, the default timeout is set to 30 seconds. If the page takes longer than 30 seconds to load, 
a TimeoutException will be raised
NoSuchFrameExceptionc

Some More Example of Expections - 

try {
driver.switchTo().frame("frame_11");
} catch (NoSuchFrameException e)


try {
driver.switchTo().alert().accept();
} catch (NoSuchAlertException e)




#6. Abstract Class - can't create object of abract class BUT it can access using inteheritance we can extends the absract class, 
then abstract method can only written in abstract class 

#7. What are the different types of string methods - 
compare(), concat(), equals(), split(), length(), replace(), compareTo(), intern(), substring() 
	    String name= "Sushant Pawar";
	    String newName= name.substring(0, 7);
	    System.out.println(newName);// Sushant
	    
	    String name= "SushantPawar@name";
	    String [] namqa= name.split("@");
	    for(String finalName: namqa){
	        System.out.println(finalName);
	    }
	    
//To compare the numbers we can user Integer.compare() which returns zero if numbers are same

public class Main
{
	public static void main(String[] args) {
	    
	    int S1= 10;
	    int S2= 10;
	    
        int result=Integer.compare(S1, S2);
        
	    System.out.println(result);
		System.out.println("Hello World");
	}
}



//S1.compareTo(S2) - We use this to comare the String and it returns 
//Zero if string are same 


public class Main
{
	public static void main(String[] args) {
	    
	    String num= "sushant";
	    String num2= "sushant"; 
	    
	    if(num.compareTo(num2)==0){
	        
	        System.out.println("OK");
	    }

	}
}
	    

char[] ch={'j','a','v','a','t','p','o','i','n','t'};  //covert the char array to string 
String s=new String(ch); 
SYSO (s)// javapoints;




#8. What is collections? what collections you have used? -
Collection of the objects using array, arraylist, hasMap, Set 

Array - Size is defined and can’t modified - 

#Two types of array-

A. Array Declaration - 

String [] name= {“Sush”, “Pawar”};

B. Array Initialisation - 

String nameQA []= new String [2];      //Array initialisation where datatype name of array square branccket= new datatype [size of array]

namesQA[0]= “Sush”;

namesQA[1]= “pawer”

C. Array Size = nameQA.length.      //To find the length of the array 


ArrayList - We can modified the size of the array 

Array List Syntax- 
ArrayList <String> name= new  ArrayList<String>();

ArrayList methods- 
Add elements to array
Name.add(“SUSH”);
Name.add(“KISH”);
Name.add(“ROH”);

Access Array List elements - 
Name.get(0) //to get the first element in arraylst

Size of array list- 
Name.size();

Modifiye arraylist 
Name.set(0, “Ketan”);

Also .remove (0) or we can clear array list by name.clear();

#ArrayList and LinkedList is almost same, just for array list- it stores the data in array and if array is big then it remove the old array and create new big array however for linked list it create containers, and if linked with other container it not removes the first containers 

Some methods for LinkedList - addFirst(), getFirst(), getLast()


HashMap - 
#HashMap - Key, Value pair
HashMap <String, String> names= new HashMap <String, String> (); //intilaize the hashmap of string
To map the key value pair (“India”, “Mumbai”)

HashMap <Integer, String> names= new HashMap <String, String> (); //intilaize the hashmap of Integer and String 
To map the key value pair (1, “Mumbai”)

Names.put(“1”, “First Number”); //to put the key and value in HashMap 

Names.get(1) //Enter the key here it will give you the value as result, ie. Mumbai

To print the the key only - 
For(int I: name.keySet()){
SYSO(i)
}

To print the the value - 
For(String I: name.values()){
SYSO(i)
}


#9. What is interface and abstact class - (Both are used to do data abstractions)
Data abstraction is the process of hiding certain details and showing only essential information to the user.

Abstraction can be done using the absraction class and interface 

Abraction Class- We can not create an object of the abstraction class, abstract method can use only in abstarct class & abstraction method dose not have a body
the body can written in the subcalss that calling the abstarct method using inheritance 

// Abstract class - 

abstract class Animal {
  
  public abstract void animalSound();  // Abstract method (does not have a body)

  public void sleep() {       // Regular method
    System.out.println("Zzz");
  }
}


class Pig extends Animal {       // Subclass (inherit from Animal)
  public void animalSound() {
    
    System.out.println("The pig says: wee wee");      //// The body of animalSound() is provided here
  }
}

class Main {
  public static void main(String[] args) {
    Pig myPig = new Pig(); // Create a Pig object
    myPig.animalSound();
    myPig.sleep();
  }
}


Abstraction can also done using the interface - 


interface Animal {     // Interface
  public void animalSound();   // interface method (does not have a body)
  public void sleep();    // interface method (does not have a body)
}

// Pig "implements" the Animal interface
class Pig implements Animal {
  public void animalSound() {
    // The body of animalSound() is provided here
    System.out.println("The pig says: wee wee");
  }
  public void sleep() {
    // The body of sleep() is provided here
    System.out.println("Zzz");
  }
}

class Main {
  public static void main(String[] args) {
    Pig myPig = new Pig();  // Create a Pig object
    myPig.animalSound();
    myPig.sleep();
  }
}


We using inteface class of ITlistner and implements that in our listner class where we can use that interface methods such as OnTestFailed() and write our code 
like to print message after test case get failed or screenshot methods  


#10. Method overloading and method overriding - 
A. Method Overloading - Complie time polymorphism, may or may not inheritance required here 
  Same method name with different parameters 

class Adder{  
static int add(int a,int b){return a+b;}  
static int add(int a,int b,int c){return a+b+c;}  
}  
class TestOverloading1{  
public static void main(String[] args){  
System.out.println(Adder.add(11,11));  
System.out.println(Adder.add(11,11,11));  
}}   

B. Method Overriding - Run time polymorphism, required the inheritance 
Same method name with same parameters 
//Java Program to illustrate the use of Java Method Overriding  
//Creating a parent class.  
class Vehicle{  
  //defining a method  
  void run(){System.out.println("Vehicle is running");}  
}  
//Creating a child class  
class Bike2 extends Vehicle{  
  //defining the same method as in the parent class  
  void run(){System.out.println("Bike is running safely");}  
  
  public static void main(String args[]){  
  Vehicle obj = new Vehicle();//creating object  
  obj.run();//calling paranet method 
  Vehicle obj= new Bike2();
  obj.run();
  
  }  
}  

Expamle of method overding - we overide the method of interface ITlsitenr, so we used there methods such as OnTestFail() OnTestStart() and use our code such 
as message after test case get failed or add message for testcase start 

Another example of method overding is FluentWait - 





#11. How you will type in textfied without using sendkeys - 
JavascriptExecutor js= (JavascriptExecutor)driver;
js.executeScript ("document.getElementById('gsc-i-id1').value='Selenium'");

#12. Access modifier - 

Private - Only can use within the class, not outside the class and outside the package 
Public - Can use outside the class and outside the package 
Protected - can access within the class as well as outside the class of same package not the outside package class, it can access outside the package only when
it inheriate from the that class where it is declared using extends 
Default - when no any data type is provide it set to default, it can access within the class and withing the same package can't access outside the class even
it inheriate from the that class where it is declared using extends 

Inorder to use our varibale to the private varibale of other class we can use getter and settler - 

Private string name= "Sushant";

public void getter(String name)
 this.name= name;
 
 public void setter(){
 SYSO(name);
 }


#12. Remove the character from the String
Using for loop - 
public class Main
{
	public static void main(String[] args) {
	    String name = "susaahant paaawar";
	    String finalString="";
	    char [] nameQa= name.toCharArray();
	    
	    for(int i=0; i<nameQa.length; i++){
	        if (nameQa[i]!='a'){
	            finalString=finalString+nameQa[i];
	        }
	    }
		System.out.println(finalString);
	}
}



Using replace ALL - 

public class Main
{
	public static void main(String[] args) {
	    String name= "suaashant pawawar";
	    String finalString= name.replaceAll("a", "");
		System.out.println(finalString);
	}
}




#13. How many browser you can use for automation -


#14. Parallel testing using testNG - 


#15. Fluent Wait - ?? - 

Default polling time is 500 milliseconds which is 0.5 seconds 

Hard wait - Thread.sleep (20), driver get sleep until 20 milliseconds even next action element shows

Implicitly wait - Tell driver to wait until post the error No such element present if present then go ahead quickly for next action element 

Explicit wait - Wait until that element is clickable - or visible or alertPresent () - elementToBeClickable() or visibilityOfElementLocatedBY(locator) OR 

#16. Difference between throw and throws - 

A. Throw - We can explicitly adding an exception here 
Eg, for 
Public class CheckNUmber(){
If (number<1){
throw new ArithmeticException (“Number can not be negative”)
}else{
System.out.println(“This is the nubmber”+ number);
}
}

B. Throws - This is used for a method on which exception can comes 
Public class CheckDevideBy() throws ArithmeticException {
Int div= t/n;
Return div;
}

#17. #Difference in Final, finally
Final- 
(1) Once declared, final variable becomes constant and cannot be modified.
(2) final method cannot be overridden by sub class.
(3) final class cannot be inherited.

Finally- 
(1) finally block runs the important code even if exception occurs or not. it's uses after exception ocuured 


#18. This and super keyword in java - 
A. super keyword is used to access methods of the parent class - 
If super class method is A() then we can use super.A() - mening calling super class method A


B. while this is used to access methods of the current class - 
public class A{
int a=200;
public void method(){
this.a= 100
}
}

#19. Type Casting in JAVA - 
#double - Big Size data type that int 
Then if any to covert the double to int then we need to add syntax (Narrowing)
double value= 19.99;
		int numverValue= (int) value;
		System.out.println(numverValue); // result will be 19



Widening - from lover data type to higher datatype - 
	int num= 10;
		double numVale= num;
		System.out.println(numVale); //result will be 10.00
		
		
		
For convert the String number into the integer 
String number= "10";
int num= Integer.parseInt(number)

When covert the number into string 
Integer num= 10;

String number = num.toString()

		
		
#20. Types of Polymorphism - 
	 Many forms - we can user our super class methods for another user,
	 we can user superclass methods and write our code in it, 
	 single action/method can be performed in different ways to perform differently
	 
	 A. Static (Compile time polyorphism) - 
	 Same name method but with different parameters 
	 Class A{
	 methodAdd(1,2)
	 methodAdd(1,2,3)
	 }
	 
	 Class B{
	 public static void main(String [] args){
	 A obj= new A();
	 obj.methodAdd(1,2);
	 obj.methodAdd(1,2,3);
	 
	 }
	 }
	 
	 
	 
	 B. Dynamic (Run time polymorphism)- 
	 We use Upcasting here Create object of super class which refere the sub class 
	 
	 Class A{
	 public void Myname(){
	 "My name is Rahul"
	 }
	 
	 }
	 
	 Class B extends A{
	 public void Myname(){
	 "My name is Sushant"
	 }
	 
	 }
	 
	 
	 Class C{
	 public static void main(String [] args){
	 A obj= new B();// Upcasting    We use Upcasting here Create object of super class which refere the sub class 
	 obj.Myname(); - Output will be sushant 
	 
	 
	 }
	 
#21. Encapsulation and common use cases - 
The meaning of Encapsulation, is to make sure that "sensitive" data is hidden from users

We need to declare that as a private as we cant access private varibale/methods outside the class

BUT we can access those private attributes using get and set methods 

Class A{
Private String name;
//Getter 

public String getName(){
return name;
}

//Setter
public void setName(String newName){
this.name= newName;
}

}


public class Main {
  public static void main(String[] args) {
    Person myObj = new Person();
    myObj.setName("John"); // Set the value of the name variable to "John"
    System.out.println(myObj.getName());
  }
}


#22. Can I write try catch without the catch block?
Yes using finally block it will always excute finally 


#23. How to prevent a class from being sub classes?
- 
public final class A
{

}

#24. Static block and instance block 
static blocks executes before instance blocks in java
Also, static blocks are executed before constructors



		
#25. To find the same char of the string and it's count - 
public void checkChar() {
		String name= "SuShanSt";
		int count;
		
		char [] nameQA= name.toCharArray();
		count=0;
		for(int i=0; i<nameQA.length; i++) {
			
			for(int j=i+1; j<nameQA.length;j++) {
				if(nameQA[i]==nameQA[j]) {
					System.out.println(nameQA[j]);
					count= count+1;
				}
			}
		}System.out.println(count);
		
	}

#26. prime number -  Conditon [number% (2 to number) ==0] should not satisfield 

public void checkChar() {
		
		int num= 30;
		boolean flag= false;
		
		for(int i=2; i<num; i++) {
			
			if(num%i==0) {
				flag=true;
				break;
			}
		}
		
		if(!flag) {
			System.out.println("This is prime number");
		}else {
			System.out.println("This is not a prime number");
		}
	
		
	}


#27. Scrolling horizontally and vertically 

JavascriptExecutor js = (JavascriptExecutor) driver;

js.executeScript("window.scrollBy(x-pixels,y-pixels)");


#28. JDK 1.8 onwards & JAVA 8 - have a new feature on which we can write body to interface methods using default and static 
And can call them after implements and then extend the class where it implements 


#29. Multiple inheritance - Java dose not support the multiple inheritance such as - 
Class A
  
Class B 


Class C extends A, B // not allowed multiple inheritance 


So overcome this problem using interface & after java 8 and JDK 1.8 we can enter the methods default and static to our interface and can implements multiple time 

Interface A

Interface B 

Class C implements A, B 
{ 
}

Call the methods without 




#28. Singleton class - A Singleton class in Java allows only one instance to be created and provides global access to all other classes through this single object or instance.


#29. GitHub - 

Go to Github - Add our GitHub repository URL -Github Repository will show in eclipse

Now Copy our project to that GitHub repository from our machine, then that project will show in eclipse repo

Then Write click on project - Team - Share project - Git Staging - Copy all files and paste to staged changes then commit and push - add unmet/pwd - 
then GitHub site will show the project 

Pull the branch master if someone make commits on the master so latest master can pulled 

Create different branches on GitHub and we can also pull those by Team- Switch to - Branch name

Add commit using Team - Commit - Staging Commit - drag drop the unstated changed file into Staged changes then push and commit 

We can merge the branch into master branch by - Team - Merge into Master 

#30. Which things can’t you automate 
* Automating Captcha is not possible using Selenium WebDriver.
* We can not read bar code using Selenium WebDriver.


#31. Web driver Listner & testNg Listner when to used 

Challenges  facing while automation - 
Timeout page - PagetimeOut as default time is 500 milliseconds from web driver to find elements so we used the pageLoad time 
driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);


Elements not clickable - Those are visible but no clickable, it take some time to click such elements, so we used the explicit time condition 

Po ups handling - We users the Alert function here to handle the popups


#32. Challenge faced while manual testing - We have third party API ambassador which basically use to provide a coupons 0r gift cards to the user, 

#33. Challenges faces while automation testing - 

#34. Software development life cycle 
Software testing lifecycle 
Agile 
Waterfall model 
What is smoke 
What is regression 
What is sanity 


#35. Currently I am working on the ship sticks project, it’s a web application, where user can ship his own golf bags, skis bags, luggage bags from his own location to any other location or golf clubs or ski or golf resorts 

Usually the golfers/golf player has it own golf bag, ski bags which contains different set golf sticks, golf bolls and those are very expensive, so if such peoples want to go play golfs somewhere in the world they need to carry the whole badges along with him, so instead of doing this they can use this site to ship here baggage from there address to another address which can be any glob club/resort address in the world 

In order to do the shipping we are using carrier API’s such as DHL, FedEx, UPS carriers which ships the luggage worldwide, so basically this site is a interface between the users and the carriers 

So we provide a userfreidnly GUI specially for such golfers to ships there luggage or golf bags from there address to any golf resorts/address/hotels in the world 

UPS & FedEx carrier users to do domestic shipping like within the USA

DHL carrier used to do an international shipping US to any other countries 

So whenever user entered the origination and the destination, Ship dates, delivery dates, we send those details to carrier using the respective carrier API, and creating order to the user, we provide our own order ID, shipment tracing ID to user so user can track his bags/luggage on our site

Here actually we are creating order on the carrier site using there APIS, so carrier also providing us an carrier tracking ID of the products to track those products and there status, we used there status and covert those into user friendly message and shows those to our users 

Carriers basically providing us the transit time like next day, second, day, ground as per the locations user entered, we took those transit time and add our pricing to those options 

We provided coupons, gift cards, insurance to our users for payment we are using Braintree as payment method 

We have a CSR team where user can contact in order to solve the problems of user regarding there booked products shipment, if they want to cancel there shipping, or want to modifications in thee products

We have our iOS apps as well to book shipments for user

We have 7 dev, 4 QA  - 2 senior level devs from client and 5 dev in our Sid includes one iOS developer

I. QA from there side, 3 QA on our side on which one for do a automation testing 



#36. Software testing life cycles - 
Requirement analysing - Read the requirements document, any case of any concern with the requirements - RTM - Requirements  traceability matrix

Test planning - Which tools we are using, cost, efforts, resources, role and responsibilities- Test plan 

Test case developments - Write a test cases 

Test environment setup - Dev team provides the environment to test 

Test Execution - Actual ruing test cases, reports bugs, create test reports done by the tester who is testing the applications 

Test closure 

Traceability matrix - 
It’s a documents that maps & trace the requirements with the test cases, the main purpose to make sure all the requirements are validating using test cases 

#37. Smoke testing - Testing a major functionality to make sure build is stable, when any new module intruded which interacted with the old one, signup with Apple ID, so once good go for further testing 

#38. Sanity testing - Perform when new features is added or bug fixes get pushed

#39. Regression testing when ruby version changes -  Full application testing 



#40. Roofing Southwest - 
This is web based application for employees of the one of the big roofing contractor and construction company of the US , the employee/worker of this company using the app when then go to the working site, so they need to create the inspections before start the work, after the end of the day, safety inspections, in progress inspections by adding the locations projects, photosets, live locations, safety equipments details 

So once inspection created by those workers the team leader, or contractor or project manager can review those aded inspection from the web and provide reviews to those inspection and respective workers got the notifications as per the review on there mobile 

Also in web we managers the daily projects works, inspection records, adding different workers, graphical representation of the status using cron jobs 

It’s both android and iOS build using JIRA 


#41. Defect life cycle - 
New 
Assigned 
Open - Duplicate, rejected, differed 
Fixed 
Retest - Open 
Verified 
Closed 

#42. Waterfall model 
Requirement analysing 
Design 
Coding 
Testing 
Deployment 
Maintenance 


#43. Agile model - 
Develop the project in few modules and release those modules so if change request comes it can be easily tackle 
Scrum master - Take meeting - review sprint - start and end sprint 
Project owner - adding the tickets in backlogs 


#44. Things on the test plan - 
Analysing the products
Make test statergies 
Efforst 
Resource allocations and role and responstliblity 
Estimation of the testing 
Things can be under testing 

#45. How to run java program without eclipse 
- Create program in notepad and saved as .java
- On command line compile that using javac filename.java - it created class file 
-  Java “class file “

#46. StateElementrefrerance exception - It comes when element get changed from the DOM or element get deleted from the (Document Object Module ) DOM structure of HTML structured on which element is present  

To overcome the exception - 
Refresh the page - driver.navigat().refresh()

Or add element in try and catch 


#47. Constructer chain - How we can call the default constructor using the parameterised constructor - 

For same class we can user this keyword to call other constructor in same class 
So this() - calling default constructor 
this(“parameter”) - calling the parameterised constructor

Class (){
}
Class(“paramer”){
this()
} 

For class which extends from the Base class - 

We can user super() keyword 

Super () for default constructor 

Super (“paramer”) - to call parameter constructor from the base class 

Super(“”parameter)


#48. OOPS concept - 
Inheritance
Encapsulation 
Polymorphism
Abstraction 

#49. Find element using starts and contains - For dynamic WebElement with same start thing and end thing - 
//input[starts-with(@name, ‘SU’)] - To all the elements with attribute name and name start with ’SU’

//input[contains(@name, ‘ant’)] - To all the elements with attribute name and name start with ’ant’



#50. How remove white spaces from the string - 
1. Using String replaceAll(“\\s”, “”)
2. String str = "India Is My Country";  
3. 	 
4. 	 char[] myname= str.toCharArray();
5. 	 StringBuffer strBuild= new StringBuffer();
6. 	 
7. 	 for(int i=0; i<myname.length;i++){
8. 	     
9. 	     if(myname[i]!= ' '){
10. 	         
11. 	         strBuild.append(myname[i]);
12. 	     }
13. 	 }
14. 	 
15. 	 System.out.println(strBuild);





#51. Why we use static keyword before main method - This is because complier (JVM) started his execution from main class so no need to create an object of the static main method 

#StringBuffer & StringBuilder 
String str = "India Is My Country";  
	 
	 char[] myname= str.toCharArray();
	 StringBuffer strBuild= new StringBuffer();
	 
	 for(int i=0; i<myname.length;i++){
	     
	     if(myname[i]!= ' '){
	         
	         strBuild.append(myname[i]);
	     }
	 }
	 
	 System.out.println(strBuild);



#56. Check URL for where we use what 
https://www.softwaretestinghelp.com/essentials-of-java-in-selenium/

#57. Difference between the 
driver.get() - It wait until the page load completely 
driver.navigate().to() - It’s not wait until the page load - for this we have features that navigate().back, navigate().refresh

#58. Fluent Wait - 
Wait<WebDriver> wait= new FluentWait<WebDriver>(driver)
.withTimeout(10, TimeUnits.SECONDS)
.pollingEvery(20, TimeUnits.SECONDS)
.ignoring(NoSuchElementExpection.class);

WebElement linkBtn= wait.until(new Function<WebDriver, WebElement>(){
  Public WebElement Apply(WebDriver driver){
     Return 
     Driver.findEleent(By.xpath(“//”)); 
      }       
});


#59. #Difference between int and Integer - 
Int - stores numeric value into memory as binary - Primitive data type

Integer - Wrappper class - convert the it into the object so we can user to convert it 
Integer num= 10;
String name= num.toString();

#60. Selenium Grid - 
#Selenium Grid -
Selenium Grid uses a hub-node concept where you only run the test on a single machine called a hub, 
but the execution will be done by different machines called nodes

you will use 2 machines. The first machine will be the system that will run the hub while the other machine will run a node. 
For simplicity, let us call the machine where the hub runs as “Machine A” while the machine where the node runs will be “Machine B.” 
It is also important to note their IP addresses. Let us say that Machine A has an IP address of 192.168.1.3 while Machine B has an IP of 192.168.1.4

Selenium Grid is a feature in Selenium that allows you to run test cases in different machines across different platforms.

The control of triggering the test cases is on the local machine, and when the test cases are triggered, they are automatically executed by the remote machine.

The machine which actually triggers the test case known as Hub

A. Download the selenium server on local machine, make local machin as Hub using CMD prompt, so it create the URL of hub, the URL contains the IP address and the port 

B. Download the selenium server on another machine that we want to make as Node, then using the IP of the hub we can make this machine as node of that hub using the 
CMD promt, it also gives the URL of the node wich conatin IP of node and port number

C. We need user DesiredCapabilites (for browser and OS) and the RemoteWebDriver (set the node)

Then on hub we need to initialise the Desiredcapability and RemoteWebDriver 

DesiredCapabilites cappability= DesiredCapabilites.Chrome()
cappability.setBrowserName(“chrome”);
cappability.setPlatform(Platform.XP);

WebDriver driver;
driver= new RemoteWebDriver(new URL(“URL of nodet”), capability);


#61. Adhoc Testing? Unstructred testing, no any plan for the testing, 
random take an module and do testing, no document, no test cases needed here to do ad hoc testing, error guessing 

Types of Adhoc testing - 
Buddy testing - Developer with tester
Pair testing - Two tester with different knowledge	
Monkey testing - random test here and there 

#62. Black box and white box testing - 
Black box - Done by Tester, where no any knoledge of internal structure of the application, coding, logic 
Functional
Non functional 

While Box- Done by developer, which having idea about code, structure such as path testing, condition testing 

#63. Concurrency testing - To find the defects when multiple user logged into 
the application at the same time in order to check the effects on same database records 

#64. Length of string without using length function - 
Length = 0;
Using char [] charname= str.toCharArray()
For (char c:charname){
length++
}
Return length;


#65. Current JAVA version is 8 with JDK 1.8 


#66. Current selenium version is 4

We can take a screenshot of an element using below - 
WebElement element = driver.findElement(By.cssSelector(".btn"));
        File scrFile = ((TakesScreenshot)element).getScreenshotAs(OutputType.FILE);
        File dstFile = new File("./loginbutton.png");
        FileUtils.copyFile(scrFile, dstFile);
	

#67. #Private constructer 

Note that if a constructor is declared private, we are not able to create an object of the class. Instead, we can use this private constructor in Singleton Design Pattern

Can not be a sub class
Can not create an object of class 
Can not extends 

The main purpose of using a private constructor is to restrict object creation.

We can create a instance of the same class for such class and use that instances on other class using get Instance method

So we can create an object in same class where we set a private constructer which returns the obj of such class on which private constructer is defined then if we want to use that on other class then 

Simply call that object create method which returns the objects 



#68. Stress Testing - Stress testing is to test the system behaviour under extremely heavy load conditions and ensuring that software doesn’t crash under crunch situations - Endurance Testing. - 

Online shopping on the festivals seasons - When lots of users come to site, so this might king of abnormal situation 

* To check whether the system works under abnormal conditions.
* Displaying appropriate error message when the system is under stress.


#69. Load Testing - Load Testing is a non-functional software testing process in which the performance of software application is tested under a specific expected load.



#70. Java platform indépendant 

Complies the code convert into byte code and byte code is platform independent so can run on any system , it just need a JRE - java run time environment	which provided by JDK


#71. 
#Example of functional and non functional testing - 
A. Functional testing - Check the functionality of the application as per the customer requirements, gives proper input and check output, the actual result should be as per the expected results 

Smoke 
Sanity 
Regression 

B. Non Functional Testing - such as performance testing, stress testing, load testing which is not a customiser 
requirements but just to make sure application works on such high critical conditions 


#72. Exceptions example of java - 

	    int number []= new int [2];
	    
	    try{
	        
	        number[0]= 10;
	        number[1]= 20;
	        number[2]= 30;
	        number[3]= 40;
	    }
	    
        catch(Exception e){
	        
	       e.printStackTrace(); // for using e.printStackTrace(); we can print the expection with line number where the expection happne in try block
	    }
	    
	    
	    OR 
	    catch(Exception e){
	        
	       SYSO(e) // print the expection name
	    }
	    
	    OR 
	    catch(Exception e){
	        
	       SYSO("Our message what we put the message as Expection") // print the expection name
	    }


##Maven - All repository such as Junit, Selenium, TestNg are downloaded in .m2/repository folder 
Cont+Shift+G - for Mac 

So folder will be users/Sushant/.m2
Repository 
  Group id
    Affilate ID
      Version 
         Jars 


Setting.XML -  it’s basically use for to add repository folder the proxy server, credential details it’s kind of pom.xml on where 
The user can add the details so the dependancies get downloaded for the proxy server as we need to configure that in the setting.xml file


Maven Clean Build - it’s cleans the complied java code 




#Web Services & API key difference - 

All the web services are API

BUT all the API are not a web services 

Web Service can use HTTP protocol, and supports XML to data exchange 

API can use both HTTP and HTTPS protocol - XML and JSON format 
